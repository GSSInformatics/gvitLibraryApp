package com.gss.libraryapp.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/27/2015 7:56:50 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Book implements KvmSerializable {
    
    public String department;
    public String semester;
    public String subject;
    public String serialnum;
    public String author;
    public String edition;
    public String bookName;
    
    public Book(){}
    
    public Book(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Department"))
        {
            Object obj = soapObject.getProperty("Department");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                department = j.toString();
            }else if (obj!= null && obj instanceof String){
                department = (String) obj;
            }
        }
        if (soapObject.hasProperty("Semester"))
        {
            Object obj = soapObject.getProperty("Semester");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                semester = j.toString();
            }else if (obj!= null && obj instanceof String){
                semester = (String) obj;
            }
        }
        if (soapObject.hasProperty("Subject"))
        {
            Object obj = soapObject.getProperty("Subject");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subject = j.toString();
            }else if (obj!= null && obj instanceof String){
                subject = (String) obj;
            }
        }
        if (soapObject.hasProperty("Serialnum"))
        {
            Object obj = soapObject.getProperty("Serialnum");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                serialnum = j.toString();
            }else if (obj!= null && obj instanceof String){
                serialnum = (String) obj;
            }
        }
        if (soapObject.hasProperty("Author"))
        {
            Object obj = soapObject.getProperty("Author");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                author = j.toString();
            }else if (obj!= null && obj instanceof String){
                author = (String) obj;
            }
        }
        if (soapObject.hasProperty("Edition"))
        {
            Object obj = soapObject.getProperty("Edition");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                edition = j.toString();
            }else if (obj!= null && obj instanceof String){
                edition = (String) obj;
            }
        }
        if (soapObject.hasProperty("Bookname"))
        {
            Object obj = soapObject.getProperty("Bookname");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bookName = j.toString();
            }else if (obj!= null && obj instanceof String){
            	bookName = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return department;
            case 1:
                return semester;
            case 2:
                return subject;
            case 3:
                return serialnum;
            case 4:
                return author;
            case 5:
                return edition;
            case 6:
                return bookName;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 6;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Department";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Semester";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Subject";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Serialnum";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Author";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Edition";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Bookname";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
